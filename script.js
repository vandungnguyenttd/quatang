const starField = document.getElementById("star-field");
const starCount = 300;

const starTypes = ["", "star-4", "star-5", "star-6"];
const twinkleClasses = [
    "twinkle1",
    "twinkle2",
    "twinkle3",
    "twinkle4",
    "twinkle5",
];
const CAPTIONS = {
  thutay: "Ch√∫c m·ª´ng nƒÉm m·ªõi! üéâ\nM·ªôt nƒÉm m·ªõi l·∫°i ƒë·∫øn, mang theo bi·∫øt bao hy v·ªçng, ∆∞·ªõc m∆° v√† nh·ªØng kh·ªüi ƒë·∫ßu t∆∞∆°i s√°ng. Mong r·∫±ng nƒÉm nay s·∫Ω l√† h√†nh tr√¨nh ƒë·∫ßy ni·ªÅm vui, s·ª©c kh·ªèe d·ªìi d√†o v√† th√†nh c√¥ng r·ª±c r·ª° cho b·∫°n v√† nh·ªØng ng∆∞·ªùi th√¢n y√™u. H√£y ƒë·ªÉ qu√° kh·ª© kh√©p l·∫°i, gi·ªØ l·∫°i nh·ªØng k·ª∑ ni·ªám ƒë·∫πp v√† b√†i h·ªçc qu√Ω gi√°, ƒë·ªÉ r·ªìi t·ª± tin b∆∞·ªõc ti·∫øp v·ªõi t√¢m th·∫ø t√≠ch c·ª±c v√† l·∫°c quan. Ch√∫c b·∫°n lu√¥n m·ªâm c∆∞·ªùi tr∆∞·ªõc m·ªçi th·ª≠ th√°ch, lu√¥n t√¨m th·∫•y ni·ªÅm h·∫°nh ph√∫c trong t·ª´ng kho·∫£nh kh·∫Øc, v√† bi·∫øn m·ªçi ∆∞·ªõc m∆° th√†nh hi·ªán th·ª±c. M·ªôt nƒÉm an khang, th·ªãnh v∆∞·ª£ng, v·∫°n s·ª± nh∆∞ √Ω! üå∏üçÄ", // xu·ªëng h√†ng th√™m \n v√†o gi·ªØa
  // img43: "B√¨a s√°ch k·ª∑ ni·ªám",
};
let bgAudioEl = null;

for (let i = 0; i < starCount; i++) {
    const star = document.createElement("div");
    star.classList.add("star");

    // Random lo·∫°i ng√¥i sao
    const type = starTypes[Math.floor(Math.random() * starTypes.length)];
    if (type) star.classList.add(type);

    // Random animation nh·∫•p nh√°y
    const twinkle =
        twinkleClasses[Math.floor(Math.random() * twinkleClasses.length)];
    star.style.animationName = twinkle;
    star.style.animationDuration = `${Math.random() * 3 + 2}s`; // ng·∫´u nhi√™n 2-5s

    // V·ªã tr√≠ ng·∫´u nhi√™n
    star.style.top = `${Math.random() * 100}%`;
    star.style.left = `${Math.random() * 100}%`;

    // K√≠ch th∆∞·ªõc tƒÉng 1.5 l·∫ßn (so v·ªõi tr∆∞·ªõc)
    const size = (Math.random() * 3 + 1) * 1.2;
    star.style.width = `${size}px`;
    star.style.height = `${size}px`;

    // ƒê·ªï b√≥ng nh·∫π
    star.style.boxShadow = `0 0 ${size * 4}px white`;

    starField.appendChild(star);
}

// Hi·ªáu ·ª©ng sao bƒÉng
function initShootingStars(canvas, userOptions = {}) {
    const ctx = canvas.getContext("2d");
    let rafId = null;
    let tickId = null;
    let running = false;

    const shootingStars = [];

    const opts = {
        angle: Math.PI / 4,
        minLength: 150,
        maxLength: 400,
        minSpeed: 5,
        maxSpeed: 12,
        thickness: 2.5,
        spawnInterval: 1500,
        opacityDecay: 0.005,
        maxYRatio: 0.5,
        minTravelRatio: 0.3,
        minCountPerBatch: 1,
        maxCountPerBatch: 3,
        ...userOptions,
    };

    function createShootingStar() {
        const width = canvas.clientWidth || canvas.width;
        const height = canvas.clientHeight || canvas.height;
        const count =
            Math.floor(
                Math.random() *
                    (opts.maxCountPerBatch - opts.minCountPerBatch + 1)
            ) + opts.minCountPerBatch;

        for (let i = 0; i < count; i++) {
            const fromEdge = Math.random() < 0.5 ? "left" : "top";
            let startX, startY;

            if (fromEdge === "left") {
                startX = -100;
                startY = Math.random() * height * opts.maxYRatio;
            } else {
                startX = Math.random() * width;
                startY = -100;
            }

            const angle = opts.angle;
            const length =
                Math.random() * (opts.maxLength - opts.minLength) +
                opts.minLength;
            const speed =
                Math.random() * (opts.maxSpeed - opts.minSpeed) + opts.minSpeed;

            shootingStars.push({
                x: startX,
                y: startY,
                length,
                speed,
                angle,
                opacity: 1,
            });
        }
    }

    function drawShootingStars() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        for (let i = shootingStars.length - 1; i >= 0; i--) {
            const s = shootingStars[i];
            const endX = s.x - Math.cos(s.angle) * s.length;
            const endY = s.y - Math.sin(s.angle) * s.length;

            const gradient = ctx.createLinearGradient(s.x, s.y, endX, endY);
            gradient.addColorStop(0, `rgba(255,255,255,${s.opacity})`);
            gradient.addColorStop(1, `rgba(255,255,255,0)`);

            ctx.strokeStyle = gradient;
            ctx.lineWidth = opts.thickness;
            ctx.beginPath();
            ctx.moveTo(s.x, s.y);
            ctx.lineTo(endX, endY);
            ctx.stroke();

            s.x += Math.cos(s.angle) * s.speed;
            s.y += Math.sin(s.angle) * s.speed;
            s.opacity -= opts.opacityDecay;

            if (s.opacity <= 0 || s.x > canvas.width || s.y > canvas.height) {
                shootingStars.splice(i, 1);
            }
        }
    }

    function loop() {
        drawShootingStars();
        rafId = requestAnimationFrame(loop);
    }

    function start() {
        if (running) return;
        running = true;
        createShootingStar();
        tickId = setInterval(createShootingStar, opts.spawnInterval);
        rafId = requestAnimationFrame(loop);
    }

    function stop() {
        running = false;
        clearInterval(tickId);
        cancelAnimationFrame(rafId);
        tickId = null;
        rafId = null;
    }

    function destroy() {
        stop();
        shootingStars.length = 0;
    }

    function setOptions(newOpts = {}) {
        Object.assign(opts, newOpts);
    }

    return { start, stop, destroy, setOptions };
}

window.addEventListener("load", () => {
    const canvas = document.getElementById("shooting-canvas");
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    const shootingStars = initShootingStars(canvas);
    shootingStars.start();

    const main = document.getElementById("mainContent");
    if (main && getComputedStyle(main).display !== "none") {
        startDirectedHearts(380); // b·∫Øn 1 tim ~ m·ªói 0.38s
    }
    window.addEventListener("resize", () => {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    });
});

function createHeart() {
    const container = document.getElementById("heart-container");
    const heart = document.createElement("div");
    heart.classList.add("heart");
    heart.textContent = "üíó";

    // V·ªã tr√≠ ngang ng·∫´u nhi√™n
    const pos = Math.random() * 90 + 5;
    heart.style.left = `${pos}%`;

    // K√≠ch th∆∞·ªõc ng·∫´u nhi√™n
    const scale = Math.random() * 0.5 + 1;
    heart.style.fontSize = `${24 * scale}px`;

    // ƒê·ªô cao bay l√™n: 40vh - 70vh
    const offsetY = Math.random() * 30 + 40; // 40‚Äì70
    heart.style.setProperty("--offsetY", `-${offsetY}vh`);

    container.appendChild(heart);

    heart.addEventListener("animationend", () => {
        heart.remove();
    });
}

let heartIntervalId = null; // üîπ L∆∞u ID interval

function ensureHeartsRunning() {
    heartIntervalId = setInterval(() => {
        const count = Math.floor(Math.random() * 4) + 2; // 2‚Äì5 tr√°i tim m·ªói ƒë·ª£t
        for (let i = 0; i < count; i++) {
            setTimeout(createHeart, i * 300); // t·∫°o c√°ch nhau 300ms
        }
    }, 3000);
}

window.addEventListener("DOMContentLoaded", () => {
    ensureHeartsRunning();
});

function handleStart() {
  // ‚õîÔ∏è ch·ªëng double-click
  if (handleStart._running) return;
  handleStart._running = true;

  stopDirectedHearts(); // t·∫Øt tim bay c√≥ h∆∞·ªõng

  // üîä ph√°t nh·∫°c n·ªÅn (k√®m resume AudioContext cho iOS)
  try {
    const bgAudioEl = document.getElementById('bgAudio');
    if (bgAudioEl) {
      // resume AudioContext n·∫øu c√≥
      if (window.AudioContext || window.webkitAudioContext) {
        try {
          const Ctx = window.AudioContext || window.webkitAudioContext;
          if (!handleStart._ac) handleStart._ac = new Ctx();
          if (handleStart._ac.state === 'suspended') {
            handleStart._ac.resume().catch(()=>{});
          }
        } catch {}
      }
      bgAudioEl.muted = false;
      bgAudioEl.currentTime = 0;
      bgAudioEl.play().catch(err => console.warn('Kh√¥ng ph√°t ƒë∆∞·ª£c audio:', err));
    }
  } catch (e) { console.warn(e); }

  const main = document.getElementById("mainContent");
  const second = document.getElementById("secondContent");

  if (typeof heartIntervalId !== "undefined" && heartIntervalId) {
    clearInterval(heartIntervalId);
    heartIntervalId = null;
  }
  main.classList.add("fade-out");

  setTimeout(() => {
    main.style.display = "none";
    second.style.display = "block";
    second.classList.add("fade-in");

    // ‚úÖ Sau khi m√†n 2 ƒë√£ HI·ªÜN ‚Üí ƒë·∫£m b·∫£o video1 auto play tr√™n mobile
    requestAnimationFrame(() => {
      requestAnimationFrame(() => {
        const v = document.querySelector('#secondContent video[data-asset="video1"]');
        if (v) {
          // g√°n src n·∫øu ch∆∞a
          if (!v.src) v.src = Assets.url('video1');

          // ƒê·∫£m b·∫£o ƒë·ªß ƒëi·ªÅu ki·ªán iOS
          v.muted = true;                         // property
          v.setAttribute('muted', '');            // attribute
          v.playsInline = true;
          v.setAttribute('playsinline', '');
          v.setAttribute('webkit-playsinline', '');
          v.autoplay = true;
          v.loop = true;
          v.preload = v.preload || 'metadata';

          // iOS ƒë√¥i khi c·∫ßn load() tr∆∞·ªõc
          try { if (v.readyState === 0) v.load(); } catch {}

          v.play().catch(err => {
            console.warn('Video autoplay b·ªã ch·∫∑n, s·∫Ω th·ª≠ l·∫°i khi c√≥ t∆∞∆°ng t√°c:', err);
          });

          // B·∫£o hi·ªÉm: l·∫ßn ch·∫°m/k√≠ch ti·∫øp theo s·∫Ω play l·∫°i n·∫øu b·ªã ch·∫∑n
          const retryOnce = () => {
            v.play().catch(()=>{});
            document.removeEventListener('touchstart', retryOnce);
            document.removeEventListener('click', retryOnce);
          };
          document.addEventListener('touchstart', retryOnce, { once: true, passive: true });
          document.addEventListener('click', retryOnce, { once: true });
        }
      });
    });

    // Preload third.js sau 1.2s
    setTimeout(() => {
      try {
        const link = document.createElement("link");
        link.rel = "modulepreload";
        link.href = "./third.js";
        document.head.appendChild(link);
      } catch (err) {
        console.warn("Modulepreload third.js failed:", err);
      }
    }, 1200);

  }, 1500);
}
(function ensureVideoAfterTouch(){
  const playOnce = () => {
    const v = document.querySelector('#secondContent video[data-asset="video1"]');
    if (v) v.play().catch(()=>{});
    document.removeEventListener('touchstart', playOnce);
    document.removeEventListener('click', playOnce);
  };
  document.addEventListener('touchstart', playOnce, { once:true, passive:true });
  document.addEventListener('click', playOnce, { once:true });
})();

// ƒê∆∞a h√†m ra global
window.handleStart = handleStart;

const flipBook = (elBook) => {
    const pages = elBook.querySelectorAll(".page");
    const totalPages = pages.length;
    const nextButton = document.getElementById("nextButton");

    elBook.style.setProperty("--c", 0); // trang hi·ªán t·∫°i

    pages.forEach((page, idx) => {
        page.style.setProperty("--i", idx);
        page.addEventListener("click", (evt) => {
            if (evt.target.closest("a")) return;
            const curr = evt.target.closest(".back") ? idx : idx + 1;
            elBook.style.setProperty("--c", curr);

            // ƒê·∫øn trang cu·ªëi -> ƒë∆∞a book v·ªÅ gi·ªØa + hi·ªán n√∫t Next (fade-in 1s)
            if (curr >= totalPages) {
                elBook.classList.add("snap-center");
                elBook.style.translate = "0% 100%"; // √©p v·ªÅ ph·∫£i
                if (nextButton) nextButton.classList.add("visible");
            } else {
                elBook.classList.remove("snap-center");
                elBook.style.removeProperty("translate");
                if (nextButton) nextButton.classList.remove("visible");
            }
        });
    });
};

document.querySelectorAll(".book").forEach(flipBook);

function isPortrait() {
    return window.innerHeight > window.innerWidth;
}

function checkOrientation() {
    const warning = document.getElementById("rotate-warning");
    const cat = document.querySelector(".meo-bantim");

    if (isPortrait()) {
        document.body.classList.add("rotate-lock");
        if (warning) warning.style.display = "flex";

        // ·∫®n gif m√®o (ph√≤ng CSS b·ªã override) + d·ª´ng tim bay
        if (cat) cat.style.display = "none";
        if (typeof stopDirectedHearts === "function") stopDirectedHearts();
    } else {
        document.body.classList.remove("rotate-lock");
        if (warning) warning.style.display = "none";

        // Hi·ªán l·∫°i gif m√®o v√† b·∫≠t tim bay khi m√†n 1 ƒëang hi·ªÉn th·ªã
        if (cat) cat.style.display = "";
        if (
            typeof isMainVisible === "function" &&
            typeof startDirectedHearts === "function" &&
            isMainVisible()
        ) {
            startDirectedHearts(500);
        }
    }
}

window.addEventListener("load", checkOrientation);
window.addEventListener("resize", checkOrientation);
window.addEventListener("orientationchange", checkOrientation);

// ===== Update goToThirdContent to stop hearts + start rain =====
// script.js (module)
export {}; // (ƒë·ªÉ file l√† module; ho·∫∑c ch·ªâ c·∫ßn c√≥ 'type="module"' trong HTML)

function goToThirdContent() {
    const second = document.getElementById("secondContent");
    const third = document.getElementById("thirdContent");
    const backBtn = document.getElementById("backButton");

    // ·∫®n n√∫t Back ban ƒë·∫ßu
    if (backBtn) {
        backBtn.classList.remove("visible");
        if (backBtnTimer) clearTimeout(backBtnTimer);
    }

    // Clear hi·ªáu ·ª©ng tr√°i tim n·∫øu ƒëang ch·∫°y
    if (typeof heartIntervalId !== "undefined" && heartIntervalId) {
        clearInterval(heartIntervalId);
        heartIntervalId = null;
    }

    // B·∫Øt ƒë·∫ßu fade-out giao di·ªán 2
    second.classList.remove("fade-in");
    second.classList.add("fade-out");

    // Ch·ªù 1.5s r·ªìi m·ªõi ·∫©n giao di·ªán 2 v√† hi·ªán giao di·ªán 3
    setTimeout(async () => {
        second.style.display = "none";

        // Hi·ªán giao di·ªán 3 v·ªõi fade-in
        third.style.display = "flex";
        third.classList.remove("fade-out");
        third.classList.add("fade-in");

        // N·∫°p code giao di·ªán 3
        const mod = await import("./third.js");
        thirdModuleRef = mod;
        mod.startContentRain();
        mod.startMediaRain();

        // Hi·ªán n√∫t Back sau 10s
        if (backBtn) {
            backBtnTimer = setTimeout(() => {
                backBtn.classList.add("visible");
            }, 10000);
        }
    }, 1500); // kh·ªõp v·ªõi th·ªùi gian fade-out
}
window.goToThirdContent = goToThirdContent;

// ===== Tim bay c√≥ h∆∞·ªõng (ch·ªâ cho giao di·ªán 1) =====
let heartTimer = null;
let directedHeartsEnabled = false; // c·ªù cho ph√©p ·ªü m√†n 1

function isMainVisible() {
    const main = document.getElementById("mainContent");
    return (
        main &&
        getComputedStyle(main).display !== "none" &&
        !main.classList.contains("fade-out")
    );
}

function elementsReady() {
    const cat = document.querySelector(".meo-bantim");
    const btn = document.querySelector(".start-button");
    if (!cat || !btn || !isMainVisible()) return false;
    const rc = cat.getBoundingClientRect();
    const rb = btn.getBoundingClientRect();
    return rc.width > 0 && rc.height > 0 && rb.width > 0 && rb.height > 0;
}

function startDirectedHearts(intervalMs = 500) {
    if (heartTimer) return;
    directedHeartsEnabled = true;

    // 1) B·∫ÆN NGAY L·∫¨P T·ª®C 2 TIM ƒê·∫¶U
    spawnDirectedHeart();
    setTimeout(spawnDirectedHeart, 150);

    // 2) SAU ƒê√ì m·ªõi v√†o chu k·ª≥: m·ªói l∆∞·ª£t b·∫Øn 2 tim
    heartTimer = setInterval(() => {
        if (!directedHeartsEnabled || !elementsReady()) return;
        spawnDirectedHeart();
        setTimeout(() => {
            if (directedHeartsEnabled && elementsReady()) spawnDirectedHeart();
        }, 150);
    }, intervalMs);
}

function stopDirectedHearts() {
    directedHeartsEnabled = false;
    if (heartTimer) {
        clearInterval(heartTimer);
        heartTimer = null;
    }
}

// B·∫£o v·ªá trong ch√≠nh h√†m spawn (n·∫øu timer ch∆∞a k·ªãp t·∫Øt)
function spawnDirectedHeart() {
    if (!directedHeartsEnabled || !isMainVisible()) return;

    const cat = document.querySelector(".meo-bantim");
    const btn = document.querySelector(".start-button");
    if (!cat || !btn) return;

    // 1) T·ªça ƒë·ªô start (s) v√† end (e)
    const rCat = cat.getBoundingClientRect();
    const rBtn = btn.getBoundingClientRect();
    const sx = rCat.left + rCat.width / 2 + 25;
    const sy = rCat.top + rCat.height / 2 + 10;
    const ex = rBtn.left + rBtn.width / 2 - 60;
    const ey = rBtn.top + rBtn.height / 2;

    // 2) Control point (c) ƒë·∫∑t ·ªü gi·ªØa, nh√≠ch v·ªÅ ph√≠a end v√† "n√¢ng" l√™n tr√™n
    const dx = ex - sx,
        dy = ey - sy;
    const dist = Math.hypot(dx, dy) || 1;
    const mx = sx + dx * 0.5,
        my = sy + dy * 0.5; // trung ƒëi·ªÉm
    const CURVE_TOWARD = 0.15; // k√©o CP v·ªÅ ph√≠a ƒë√≠ch
    const LIFT = Math.min(180, Math.max(70, dist * 0.28)); // ƒë·ªô n√¢ng v√≤ng cung (px)
    const cx = mx + dx * CURVE_TOWARD;
    const cy = my - LIFT; // üî∫ n√¢ng l√™n tr√™n (y gi·∫£m)

    // 3) T·∫°o node tr√°i tim, hi·ªÉn th·ªã ngay t·∫°i ƒëi·ªÉm b·∫Øt ƒë·∫ßu
    const heart = document.createElement("div");
    heart.className = "heart-flight";
    heart.textContent = "‚ù§Ô∏è";
    heart.style.fontSize = `${28 * (1.05 + Math.random() * 0.6)}px`;
    heart.style.transform = `translate(${sx}px, ${sy}px) translate(-50%,-50%) scale(0.9)`;
    heart.style.opacity = "1";
    document.body.appendChild(heart);

    // 4) Bezier b·∫≠c 2 + easing
    const quad = (t, p0, p1, p2) =>
        (1 - t) * (1 - t) * p0 + 2 * (1 - t) * t * p1 + t * t * p2;
    const easeInOutQuad = (t) => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t);

    // Th·ªùi l∆∞·ª£ng theo qu√£ng ƒë∆∞·ªùng (m∆∞·ª£t, t·ª± nhi√™n)
    const pxPerSec = 1000; // t·ªëc ƒë·ªô ‚Äú·∫£o‚Äù
    const dur = Math.max(800, Math.min(1700, (dist / pxPerSec) * 1000));
    const t0 = performance.now();

    function step(now) {
        if (!directedHeartsEnabled || !isMainVisible()) {
            heart.remove();
            return;
        }

        let t = (now - t0) / dur;
        if (t > 1) t = 1;

        const te = easeInOutQuad(t);
        const x = quad(te, sx, cx, ex);
        const y = quad(te, sy, cy, ey);

        const s = 0.9 + te * 0.22;
        heart.style.transform = `translate(${x}px, ${y}px) translate(-50%,-50%) scale(${s})`;
        heart.style.opacity = String(1 - te * 0.18);

        if (t < 1) {
            requestAnimationFrame(step);
        } else {
            heart.animate(
                [
                    { transform: heart.style.transform, opacity: 0.85 },
                    {
                        transform: heart.style.transform + " scale(0.6)",
                        opacity: 0,
                    },
                ],
                { duration: 220, easing: "ease-out" }
            ).onfinish = () => heart.remove();
        }
    }
    requestAnimationFrame(step);
}

// H·∫° ∆∞u ti√™n m·∫∑c ƒë·ªãnh cho media m√†n 2 (s·∫Ω n√¢ng l·∫°i cho trang ƒëang xem)
function setDefaultBookMediaPriority() {
    document.querySelectorAll("#secondContent img").forEach((img) => {
        img.loading = "lazy";
        img.decoding = "async";
        img.setAttribute("fetchpriority", "low");
    });
document.querySelectorAll('#secondContent video').forEach(v => {
  if (v.dataset.asset === 'video1') {
    v.preload = 'metadata'; // ho·∫∑c 'auto'
  } else {
    if (!v.preload) v.preload = 'none';
  }
});
}
document.addEventListener("DOMContentLoaded", setDefaultBookMediaPriority);

// --- START - V√πng nh·∫•p xem ·∫£nh --- */
import { Assets } from "./assets.js";

/**
 * D√πng rectPct: [left%, top%, width%, height%]
 * -> m·ªçi gi√° tr·ªã l√† S·ªê ph·∫ßn trƒÉm (0..100), kh√¥ng k√®m d·∫•u %
 */
const HOTSPOTS = [
    {
        pageSelector: '.back:has([data-asset="book1"])',
        items: [
            { rectPct: [15, 11, 20, 24], asset: "img37" },
            { rectPct: [39, 11, 20, 24], asset: "img17" },
            { rectPct: [63, 11, 20, 24], asset: "img14" },
            { rectPct: [87, 11, 20, 24], asset: "img26" },

            { rectPct: [4,  38, 20, 24], asset: "img4" },
            { rectPct: [28, 38, 20, 24], asset: "img20" },
            { rectPct: [52, 38, 20, 24], asset: "img41" },
            { rectPct: [76, 38, 20, 24], asset: "img36" },

            { rectPct: [15, 65, 20, 24], asset: "img30" },
            { rectPct: [39, 65, 20, 24], asset: "img16" },
            { rectPct: [63, 65, 20, 24], asset: "img13" },
            { rectPct: [87, 65, 20, 24], asset: "img32" },
        ],
    },
    {
        pageSelector: '.front:has([data-asset="book2"])',
        items: [
            { rectPct: [9,  25, 28, 23], asset: "img56" },
            { rectPct: [15, 50, 23, 37], asset: "img54" },
            { rectPct: [39, 43, 22, 38], asset: "img55" },
            { rectPct: [63, 22, 22, 37], asset: "img37" },
            { rectPct: [64, 61, 29, 22], asset: "img41" },
        ],
    },
    {
        pageSelector: '.back:has([data-asset="book3"])',
        items: [
            { rectPct: [10, 12, 17, 23], asset: "img64" },
            { rectPct: [31, 12, 17, 23], asset: "img62" },
            { rectPct: [52, 12, 17, 23], asset: "img59" },
            { rectPct: [73, 12, 17, 23], asset: "img58" },

            { rectPct: [10, 38, 17, 23], asset: "img48" },
            { rectPct: [52, 38, 17, 23], asset: "img53" },
            { rectPct: [73, 38, 17, 23], asset: "img49" },

            { rectPct: [10, 65, 17, 23], asset: "img44" },
            { rectPct: [31, 65, 17, 23], asset: "img29" },
            { rectPct: [52, 65, 17, 23], asset: "img13" },
            { rectPct: [73, 65, 17, 23], asset: "img11" },
        ],
    },
    {
        pageSelector: '.front:has([data-asset="book4"])',
        items: [
            { rectPct: [65,  9, 28, 23], asset: "img20" },
            { rectPct: [67, 38, 28, 23], asset: "img12" },
            { rectPct: [69, 68, 28, 23], asset: "img26" },
        ],
    },
    {
        pageSelector: '.back:has([data-asset="book5"])',
        items: [
            { rectPct: [16, 13, 10, 13], asset: "img72" },
            { rectPct: [27, 9, 12, 17], asset: "img73" },
            { rectPct: [40, 15, 9, 12], asset: "img71" },
            { rectPct: [53, 15, 11, 11], asset: "img56" },
            { rectPct: [64, 9, 10, 20], asset: "img70" },
            { rectPct: [74, 10, 9, 13], asset: "img69" },
            { rectPct: [11, 26, 13, 8], asset: "img67" },
            { rectPct: [25, 26, 12, 8], asset: "img60" },
            { rectPct: [37, 26, 13, 12], asset: "img68" },
            { rectPct: [51, 26, 13, 12], asset: "img65" },
            { rectPct: [74, 23, 14, 7], asset: "img55" },
            { rectPct: [10, 34, 16, 14], asset: "img37" },
            { rectPct: [26, 34, 11, 14], asset: "img36" },
            { rectPct: [64, 29, 17, 14], asset: "img57" },
            { rectPct: [80, 29, 10, 14], asset: "img47" },
            { rectPct: [13, 48, 7, 10], asset: "img29" },
            { rectPct: [20, 48, 17, 18], asset: "img9" },
            { rectPct: [64, 42, 16, 13], asset: "img62" },
            { rectPct: [80, 42, 8, 13], asset: "img16" },
            { rectPct: [28, 65, 8, 7], asset: "img17" },
            { rectPct: [37, 62, 17, 12], asset: "img21" },
            { rectPct: [54, 62, 10, 12], asset: "img18" },
            { rectPct: [64, 55, 10, 12], asset: "img25" },
            { rectPct: [73, 55, 10, 9], asset: "img14" },
            { rectPct: [40, 75, 10, 10], asset: "img45" },
            { rectPct: [50, 75, 10, 10], asset: "img58" },
            { rectPct: [45, 85, 10, 8], asset: "img44" },
        ],
    },
    {
        pageSelector: '.front:has([data-asset="book6"])',
        items: [
            { rectPct: [10, 10, 28, 33], asset: "img41" },
            { rectPct: [60, 10, 33, 40], asset: "img70" },
            { rectPct: [37, 30, 23, 36], asset: "img56" },
            { rectPct: [10, 48, 28, 36], asset: "img40" },
            { rectPct: [57, 50, 33, 36], asset: "img48" },
        ],
    },
    {
        pageSelector: '.back:has([data-asset="book7"])',
        items: [
            { rectPct: [15, 19, 22, 37], asset: "img39" },
            { rectPct: [64, 19, 15, 32], asset: "img18" },
            { rectPct: [38, 28, 25, 44], asset: "img21" },
            { rectPct: [64, 55, 28, 25], asset: "img46" },
        ],
    },
    {
        pageSelector: '.front:has([data-asset="book8"])',
        items: [
            { rectPct: [5, 36, 27, 37], asset: "img12" },
            { rectPct: [38, 45, 24, 30], asset: "img19" },
            { rectPct: [67, 40, 27, 30], asset: "img6" },
        ],
    },
    {
        pageSelector: '.back:has([data-asset="book9"])',
        items: [
            { rectPct: [18, 24, 19, 30], asset: "img8" },
            { rectPct: [38, 18, 24, 16], asset: "img26" },
            { rectPct: [63, 22, 19, 19], asset: "img59" },
            { rectPct: [18, 55, 19, 22], asset: "img2" },
            { rectPct: [38, 35, 24, 36], asset: "img6" },
            { rectPct: [63, 40, 19, 22], asset: "img10" },
        ],
    },
    {
        pageSelector: '.front:has([data-asset="book10"])',
        items: [
            { rectPct: [29, 14, 33, 27], asset: "img67" },
            { rectPct: [38, 43, 25, 38], asset: "img19" },
        ],
    },
    {
        pageSelector: '.back:has([data-asset="book11"])',
        items: [{ rectPct: [50, 50, 30, 25], asset: "thutay" }],
    },
    {
        pageSelector: '.back:has([data-asset="book12"])',
        items: [
            { rectPct: [20, 25, 25, 30], asset: "img74" },
            { rectPct: [25, 60, 27, 30], asset: "img75" },
            { rectPct: [45, 40, 20, 20], asset: "img76" },
            { rectPct: [63,  0, 25, 40], asset: "img77" },
            { rectPct: [65, 40, 25, 38], asset: "img78" },
            { rectPct: [50, 78, 40, 38], asset: "img79" },
        ],
        
    },
]; /*[ left  , top   , width  , height ] */

/* Lightbox (gi·ªØ nguy√™n n·∫øu b·∫°n ƒë√£ c√≥) */
function openLightbox(assetName, opts = {}) {
  const box = document.getElementById('asset-lightbox');
  if (!box) return;
  const img = box.querySelector('img');
  const cap = document.getElementById('asset-caption');
  const closeBtn = box.querySelector('.close');

  // reset
  box.classList.remove('closing');
  img.classList.remove('show', 'rounded');
  cap?.classList.remove('on-rounded');

  // g√°n src/alt
  img.src = Assets.url(assetName);
  img.alt = assetName;

  // caption + typewriter (gi·ªØ \n)
  if (cap) {
    const text = (typeof CAPTIONS !== 'undefined' && CAPTIONS[assetName]) ? CAPTIONS[assetName] : "";
    cap.classList.toggle('has-text', !!text);
    if (text) {
      typeCaption(cap, text, 22);    // b·∫°n ƒë√£ c√≥ h√†m typeCaption(...)
    } else {
      stopTypeCaption?.();
      cap.innerHTML = "";
    }
  }

  // bo g√≥c n·∫øu y√™u c·∫ßu
  if (opts.rounded) {
    img.classList.add('rounded');
    cap?.classList.add('on-rounded');
  }

  // m·ªü overlay
  box.classList.add('open');

  // üõ°Ô∏è mi·ªÖn nhi·ªÖm click/keyup ‚Äúl·ªçt‚Äù v√†o overlay trong 300ms
  box.dataset.justOpened = '1';
  setTimeout(() => { delete box.dataset.justOpened; }, 300);

  // ƒë∆∞a focus v·ªÅ n√∫t close (tr√°nh ph√≠m Space k√≠ch ho·∫°t l·∫°i button hotspot)
  closeBtn?.focus({ preventScroll: true });

  // b·∫≠t fade-in ·ªü frame k·∫ø ti·∫øp
  requestAnimationFrame(() => {
    requestAnimationFrame(() => {
      img.classList.add('show');
    });
  });
}

function closeLightbox(){
  const box = document.getElementById('asset-lightbox');
  if (!box) return;
  const img = box.querySelector('img');
  const cap = document.getElementById('asset-caption');

  img.classList.remove('show');

  const done = () => {
    box.classList.remove('open');
    img.src = '';
    img.classList.remove('rounded');       // <-- d·ªçn class
    cap?.classList.remove('on-rounded');   // <-- d·ªçn class
    img.removeEventListener('transitionend', done);
  };

  const t = setTimeout(done, 350);
  img.addEventListener('transitionend', () => { clearTimeout(t); done(); }, { once:true });
}
  
let _lbIgnoreUntil = 0;

function wireLightbox() {
  const box = document.getElementById('asset-lightbox');
  if (!box || box.dataset.wired) return;
  box.dataset.wired = '1';

  // ch·∫∑n ƒë√≥ng khi b·∫•m v√†o n·ªôi dung b√™n trong (img/figure/caption)
  const fig = box.querySelector('.lightbox-figure') || box;
  fig.addEventListener('click', (e) => e.stopPropagation(), { capture: true });

  // ch·ªâ ƒë√≥ng khi b·∫•m n·ªÅn t·ªëi ho·∫∑c n√∫t close
  box.addEventListener('click', (e) => {
    // mi·ªÖn nhi·ªÖm click ngay sau khi m·ªü
    if (Date.now() < _lbIgnoreUntil) return;

    if (e.target === box || e.target.closest('.close')) {
      closeLightbox();
    }
  }, { passive: true });

  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') closeLightbox();
  }, { passive: true });
}


function setupHotspotsPercent() {
    wireLightbox();

    HOTSPOTS.forEach((cfg) => {
        const page = document.querySelector(cfg.pageSelector);
        if (!page) return;

        if (getComputedStyle(page).position === "static") {
            page.style.position = "relative";
        }

        // Tr√°nh t·∫°o tr√πng
        if (page.dataset.hotspotsReady === "1") return;

        // T·∫°o h√†ng lo·∫°t b·∫±ng DocumentFragment (nhanh h∆°n)
        const frag = document.createDocumentFragment();

        cfg.items.forEach(({ rectPct, asset }) => {
            const [l, t, w, h] = rectPct;
            const spot = document.createElement("button");
            spot.type = "button";
            spot.className = "hotspot";
            spot.style.left = `${l}%`;
            spot.style.top = `${t}%`;
            spot.style.width = `${w}%`;
            spot.style.height = `${h}%`;
            spot.dataset.asset = asset; // d√πng cho delegation
            spot.setAttribute("aria-label", `Xem ${asset}`);
            frag.appendChild(spot);
        });

        page.appendChild(frag);
        page.dataset.hotspotsReady = "1";

        // ‚úÖ Event delegation: ch·ªâ 1 listener cho c·∫£ trang
page.addEventListener('pointerup', (e) => {
  const btn = e.target.closest('.hotspot');
  if (!btn || !page.contains(btn)) return;
  e.preventDefault();      // ch·∫∑n click ‚Äú·∫£o‚Äù sau touchend
  e.stopPropagation();
  openLightbox(btn.dataset.asset, { rounded: true });
}, { passive: false });
    });
}

window.addEventListener("load", setupHotspotsPercent);
// --- END - V√πng nh·∫•p xem ·∫£nh --- */

// --- START - N√∫t BACK --- */
let backBtnTimer = null;
let thirdModuleRef = null; // l∆∞u module third.js ƒë·ªÉ d·ª´ng hi·ªáu ·ª©ng khi back

function backToSecondContent() {
    const second = document.getElementById("secondContent");
    const third = document.getElementById("thirdContent");
    const backBtn = document.getElementById("backButton");

    // clear & ·∫©n n√∫t Back
    if (backBtnTimer) {
        clearTimeout(backBtnTimer);
        backBtnTimer = null;
    }
    if (backBtn) {
        backBtn.classList.remove("visible");
    }

    // d·ª´ng hi·ªáu ·ª©ng m∆∞a n·∫øu c√≥
    try {
        if (thirdModuleRef) {
            thirdModuleRef.stopContentRain?.();
            thirdModuleRef.stopMediaRain?.();
        }
    } catch (e) {
        /* ignore */
    }

    third.classList.add("fade-out");
    setTimeout(() => {
        third.style.display = "none";
        second.style.display = "block";
        second.classList.add("fade-in");
    }, 800);
}

window.addEventListener("load", () => {
    const backBtn = document.getElementById("backButton");
    if (backBtn) {
        backBtn.addEventListener("click", backToSecondContent);
    }
});

// --- END - N√∫t BACK --- */

// --- START - N·ªòI DUNG --- */
let _captionTypeTimer = null;

function stopTypeCaption() {
  if (_captionTypeTimer) {
    clearTimeout(_captionTypeTimer);
    _captionTypeTimer = null;
  }
}

// (tu·ª≥ ch·ªçn) escape ƒë·ªÉ an to√†n n·∫øu text c√≥ k√≠ t·ª± HTML ƒë·∫∑c bi·ªát
function _escapeHTML(s) {
  return String(s).replace(/[&<>"']/g, m => (
    { '&':'&amp;', '<':'&lt;', '>':'&gt;', '"':'&quot;', "'":'&#39;' }[m]
  ));
}

/**
 * G√µ ch·ªØ v√†o ph·∫ßn t·ª≠ caption theo ki·ªÉu typewriter.
 * - T·ª± chuy·ªÉn \n -> <br>
 * - speed: ms/k√Ω t·ª± (m·∫∑c ƒë·ªãnh 22ms)
 */
function typeCaption(el, text, speed = 30) {
  stopTypeCaption();
  el.innerHTML = "";
  const safe = _escapeHTML(text || "");
  let i = 0;

  const step = () => {
    el.innerHTML = safe.slice(0, i).replace(/\n/g, "<br>");
    i++;
    if (i <= safe.length) {
      _captionTypeTimer = setTimeout(step, speed);
    } else {
      _captionTypeTimer = null;
    }
  };

  step();
}
// --- END - N·ªòI DUNG --- */
