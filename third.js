
// ===== Rain text for 3rd screen =====
let rainTimer = null;
let activeBottomCount = 0; // s·ªë ch·ªØ hi·ªán h√†nh s·∫Ω r∆°i t·ªõi 100%
const BOTTOM_QUOTA = 10; // t·ªëi thi·ªÉu ph·∫£i c√≥ 10 ch·ªØ r∆°i t·ªõi ƒë√°y
// Qu·∫£n l√Ω "l·ªõp" (tr∆∞·ªõc/sau) cho m∆∞a ch·ªØ
const MAX_VISIBLE_TEXT_ITEMS = 20; // s·ªë l·ªõp ta mu·ªën qu·∫£n ƒë·ªô m·ªù
let textLayers = []; // m·∫£ng c√°c ph·∫ßn t·ª≠ hi·ªán h√†nh (m·ªõi nh·∫•t ƒë·ª©ng tr∆∞·ªõc)
const TEXT_MAX_NODES = 50;
function rebalanceTextLayers() {
    const minAlpha = 0.5;
    const maxAlpha = 1.0;
    const total = textLayers.length;

    textLayers.forEach((el, idx) => {
        const alpha =
            maxAlpha - (idx / (total - 1 || 1)) * (maxAlpha - minAlpha);
        const label = el.querySelector(".label");
        if (label) {
            label.style.setProperty("--itemAlpha", alpha.toFixed(3));
            label.style.opacity = alpha.toFixed(3);
        }
    });
}

function spawnRainItem(container) {
    // Gi·ªõi h·∫°n DOM: n·∫øu qu√° nhi·ªÅu node, x√≥a node c≈© nh·∫•t ƒë·ªÉ tr√°nh ph√¨nh
    if (container.childElementCount >= TEXT_MAX_NODES) {
        container.firstElementChild?.remove();
    }

    const words = [
        "Th∆∞∆°ng em nhi·ªÅu üíñ",
        "C√¥ b√© ƒë√°ng y√™u",
        "‚ù§Ô∏è",
        "üíó",
        "C√¥ g√°i c·ªßa l√≤ng anh üíï",
        "Happy Trang Day üéâ",
    ];
    const el = document.createElement("span");
    el.className = "rain-item";

    // V·ªã tr√≠ ngang & th·ªùi l∆∞·ª£ng r∆°i
    el.style.left = -5 + Math.random() * 110 + "vw"; // tr√†n 2 m√©p
    el.style.setProperty("--dur", 2.5 + Math.random() * 1.5 + "s");

    // R∆°i v∆∞·ª£t ƒë√°y
    const endVH = 110 + Math.random() * 30;
    el.style.setProperty("--endY", endVH + "vh");

    // Ch·ªØ ch√≠nh
    const word = words[Math.floor(Math.random() * words.length)];
    const label = document.createElement("span");
    label.className = "label";
    label.textContent = word;

    // üéØ Font-size ng·∫´u nhi√™n 1.5rem ‚Üí ~2.2rem
    const fontSizeRem = (1.5 + Math.random() * 0.7).toFixed(2) + "rem";
    label.style.fontSize = fontSizeRem;

    el.appendChild(label);

    // Khi k·∫øt th√∫c animation: g·ª° kh·ªèi textLayers v√† remove kh·ªèi DOM
    el.addEventListener("animationend", () => {
        const idx = textLayers.indexOf(el);
        if (idx >= 0) textLayers.splice(idx, 1);
        el.remove(); // üßπ quan tr·ªçng: x√≥a node sau khi r∆°i xong
    });

    container.appendChild(el);

    // Qu·∫£n l√Ω "l·ªõp" m·ªù/ƒë·∫≠m
    textLayers.unshift(el);
    if (textLayers.length > MAX_VISIBLE_TEXT_ITEMS) {
        textLayers.length = MAX_VISIBLE_TEXT_ITEMS;
    }
    rebalanceTextLayers();
}


export function startContentRain() {
  const container = document.querySelector("#thirdContent .content-rain");
  if (!container) return;
  stopContentRain();
  for (let i = 0; i < BOTTOM_QUOTA; i++) setTimeout(() => spawnRainItem(container), i * 120);
  rainTimer = setInterval(() => spawnRainItem(container), 100 + Math.random() * 100);
}
export function stopContentRain() {
  if (rainTimer) clearInterval(rainTimer);
  rainTimer = null;
}

// ===== Config m∆∞a media (CH·ªà ·∫£nh, d√πng POOL) =====
import { Assets } from './assets.js';
// ==== B·ªô ƒë·ªám blob URL cho ·∫£nh m∆∞a (t·∫£i 1 l·∫ßn) ====
const IMG_CACHE_NAME = 'rain-img-v1';
const _imgBlobURL = new Map();  // name -> blob:... url

async function getBlobURLForImage(name) {
  if (_imgBlobURL.has(name)) return _imgBlobURL.get(name);
  const url = Assets.url(name);
  const cache = await caches.open(IMG_CACHE_NAME);
  let resp = await cache.match(url);
  if (!resp) {
    resp = await fetch(url, { cache: 'reload' });
    if (resp.ok) await cache.put(url, resp.clone());
  }
  const blob = await resp.blob();
  const objURL = URL.createObjectURL(blob);
  _imgBlobURL.set(name, objURL);
  return objURL;
}

// d·ªçn blob khi r·ªùi trang (tr√°nh r√≤ b·ªô nh·ªõ)
window.addEventListener('beforeunload', () => {
  for (const u of _imgBlobURL.values()) URL.revokeObjectURL(u);
  _imgBlobURL.clear();
});
const IMAGE_NAMES = Assets.rangeNames('img', 1, 79);
const pickImageName = () =>
  IMAGE_NAMES[Math.floor(Math.random() * IMAGE_NAMES.length)];

// --- Pool c·∫•u h√¨nh ---
let mediaRainTimer = null;
const POOL_SIZE = 60;                 // ‚öôÔ∏è ƒëi·ªÅu ch·ªânh 40‚Äì80 tu·ª≥ m√°y
let mediaPool = [];                   // span.rain-media (m·ªói span ch·ª©a <img>)
let poolInUse = 0;

// Spawn nh·ªãp (c√≥ th·ªÉ adaptive sau)
function spawnInterval() {
  return 180 + Math.random() * (320 - 180); // ms
}

// T·∫°o pool node s·∫µn (g·∫Øn v√†o container 1 l·∫ßn, m·∫∑c ƒë·ªãnh ·∫©n)
function buildPool(container) {
  if (mediaPool.length) return;
  const frag = document.createDocumentFragment();
  for (let i = 0; i < POOL_SIZE; i++) {
    const wrap = document.createElement('span');
    wrap.className = 'rain-media';
    // d√πng transition thay v√¨ keyframes ƒë·ªÉ d·ªÖ reset
    wrap.style.willChange = 'transform';
    wrap.style.transition = 'transform linear var(--dur, 3s)';

    const img = document.createElement('img');
    img.decoding = 'async';
    img.loading = 'lazy';
    img.alt = 'rain-media';
    wrap.appendChild(img);

    // ·∫©n tr∆∞·ªõc, khi ‚Äúacquire‚Äù s·∫Ω b·∫≠t l√™n
    wrap.style.display = 'none';
    frag.appendChild(wrap);
    mediaPool.push(wrap);
  }
  container.appendChild(frag);
}

function acquire() {
  for (const node of mediaPool) {
    if (node.style.display === 'none') {
      node.style.display = '';
      poolInUse++;
      return node;
    }
  }
  return null; // pool ƒë√£ full
}

function release(node) {
  node.style.display = 'none';
  poolInUse = Math.max(0, poolInUse - 1);
}

// T√°i s·ª≠ d·ª•ng 1 node t·ª´ pool l√†m ‚Äúm·ªôt h·∫°t m∆∞a‚Äù
function recycleOne(container) {
  const node = acquire();
  if (!node) return;

  const img = node.firstElementChild; // <img>
  const name = pickImageName();
// ‚úÖ D√πng blob URL ƒë√£ cache (kh√¥ng request l·∫°i)
getBlobURLForImage(name)
  .then(objURL => { img.src = objURL; })
  .catch(() => { img.src = Assets.url(name); }); // fallback n·∫øu Cache API b·ªã ch·∫∑n

img.dataset.asset = name;
  img.dataset.asset = name;

  // card d·ªçc g·ªçn nh·∫π
  const w = 90 + Math.floor(Math.random() * 50);        // 90..140 px
  const h = Math.floor(w * (1.35 + Math.random() * 0.15));
  node.style.setProperty('--w', w + 'px');
  node.style.setProperty('--h', h + 'px');

  // v·ªã tr√≠ ngang, th·ªùi l∆∞·ª£ng, ƒëi·ªÉm r∆°i
  const left = -5 + Math.random() * 110;                // -5..105 vw (tr√†n m√©p)
  const dur  = 2.2 + Math.random() * 2.0;               // 2.2..4.2 s
  const endY = 110 + Math.random() * 30;                // 110..140 vh

  node.style.left = left + 'vw';
  node.style.setProperty('--dur', dur + 's');

  // Reset v·ªã tr√≠ ·ªü tr√™n ƒë·ªânh (kh·ªõp v·ªõi CSS transform)
  node.style.transform = 'translate(-50%, -15vh)';

  // bu·ªôc reflow ƒë·ªÉ transition ch·∫°y t·ª´ ƒë·∫ßu (trick)
  // eslint-disable-next-line no-unused-expressions
  node.offsetHeight;

  // animate r∆°i xu·ªëng
  node.style.transform = `translate(-50%, ${endY}vh)`;

  // H·∫πn gi·ªù tr·∫£ node v·ªÅ pool khi xong
  setTimeout(() => release(node), dur * 1000 + 30);
}

export function startMediaRain() {
  const container = document.querySelector('#thirdContent .media-rain');
  if (!container) return;

  stopMediaRain();
  buildPool(container);
const warm = IMAGE_NAMES.slice(0).sort(()=>Math.random()-0.5).slice(0, 10);
Promise.allSettled(warm.map(n => getBlobURLForImage(n))).then(()=>{/* ignore */});
  // Seed ban ƒë·∫ßu (l·∫•p ch·ªó tr·ªëng)
  const seed = Math.min(POOL_SIZE, 14);
  for (let i = 0; i < seed; i++) {
    setTimeout(() => recycleOne(container), i * 80);
  }

  // Tick li√™n t·ª•c nh∆∞ng ch·ªâ spawn khi pool c√≤n slot
  const tick = () => {
    if (poolInUse < POOL_SIZE) recycleOne(container);
    mediaRainTimer = setTimeout(tick, spawnInterval());
  };
  tick();
}

export function stopMediaRain() {
  if (mediaRainTimer) { clearTimeout(mediaRainTimer); mediaRainTimer = null; }
  // Kh√¥ng c·∫ßn remove node ‚Äî pool gi·ªØ s·∫µn; ch·ªâ vi·ªác ·∫©n ƒëi:
  for (const n of mediaPool) n.style.display = 'none';
  poolInUse = 0;
}
